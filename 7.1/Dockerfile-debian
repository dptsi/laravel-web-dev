FROM php:7.1-fpm-buster

RUN sed -i 's|http://deb.debian.org/debian|http://archive.debian.org/debian|g' /etc/apt/sources.list \
 && sed -i 's|http://security.debian.org/debian-security|http://archive.debian.org/debian-security|g' /etc/apt/sources.list \
 && sed -i '/^deb.*buster-updates/d' /etc/apt/sources.list \
 && echo 'Acquire::Check-Valid-Until "false";' > /etc/apt/apt.conf.d/99no-check-valid-until

# Install packages and remove default server definition
# Changed 'apk' to 'apt-get' for Debian
# Added software-properties-common for add-apt-repository (needed for some third-party repos, though not directly used here)
# Added curl and gnupg (already in your list)
# Added build-essential for compiling extensions
# Note: nodejs and npm are typically installed differently on Debian, often from NodeSource.
# For simplicity, I'm keeping them with apt-get for now, but be aware of potential version issues.
RUN apt-get update && apt-get install -y --no-install-recommends \
    gnupg \
    autoconf \
    make \
    g++ \
    nginx \
    supervisor \
    zlib1g-dev \
    libpng-dev \
    libicu-dev \
    librdkafka-dev \
    git \
    libzip-dev \
    nodejs \
    npm \
    curl \
    build-essential \
    libxml2-dev \
    apt-transport-https \
    && rm -rf /var/lib/apt/lists/* 

# RUN rm /etc/nginx/conf.d/default.conf

# Install PHP extensions
RUN docker-php-ext-install bcmath calendar ctype exif fileinfo gd iconv intl json mbstring pcntl posix shmop sockets sysvmsg sysvsem sysvshm tokenizer xml

# Get latest Composer
COPY --from=composer:2.2.18 /usr/bin/composer /usr/bin/composer

# Download Microsoft SQL Server Prerequisites
# Note: Debian packages for Microsoft SQL Server drivers are .deb, not .apk
# The URLs are specific to Alpine packages. We need the Debian ones.
# Find the correct URLs for Debian 10 (Buster)
# As of current time (July 2025), I'll use a placeholder URL pattern for the .deb files.
# You MUST verify these URLs from Microsoft's official documentation.
# Example: https://docs.microsoft.com/en-us/sql/connect/odbc/linux-mac/install-odbc-driver-linux?view=sql-server-ver16#debian17
# I'll use general patterns.

# Add Microsoft's official APT repository for MS ODBC drivers
RUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -
RUN curl https://packages.microsoft.com/config/debian/10/prod.list > /etc/apt/sources.list.d/mssql-release.list
RUN apt-get update
# Install msodbcsql17 and mssql-tools
RUN ACCEPT_EULA=Y apt-get install -y --no-install-recommends msodbcsql17 mssql-tools

# Set mssql-tools ENV variable to the PATH
ENV PATH "$PATH:/opt/mssql-tools/bin"
# RUN echo $PATH # No need for this in a Dockerfile, it's for debugging during build.

# Remove the ODBC packages download (no longer relevant as we install via apt)
# The packages are installed directly by apt-get, so no need to clean up .apk/.deb files.
# RUN rm msodbcsql17_17.7.2.1-1_amd64.apk \
#    mssql-tools_17.7.1.1-1_amd64.apk \
#    msodbcsql17_17.7.2.1-1_amd64.sig \
#    mssql-tools_17.7.1.1-1_amd64.sig

# Install unixodbc-dev required for pecl
# apt-get equivalent for unixodbc-dev
RUN apt-get install -y --no-install-recommends unixodbc-dev

# Install SQL Server Drivers
RUN pecl channel-update pecl.php.net
RUN pecl install sqlsrv-5.6.1
RUN pecl install pdo_sqlsrv-5.6.1
RUN pecl install rdkafka
RUN pecl install zip
RUN docker-php-ext-enable --ini-name 30-sqlsrv.ini sqlsrv
RUN docker-php-ext-enable --ini-name 35-pdo_sqlsrv.ini pdo_sqlsrv
RUN docker-php-ext-enable rdkafka
RUN docker-php-ext-enable zip

# Install Xdebug
RUN pecl install xdebug-2.9.0
RUN docker-php-ext-enable --ini-name 30-xdebug.ini xdebug

# Install redis
RUN echo '' | pecl install -o -f redis-4.3.0 && rm -rf /tmp/pear && docker-php-ext-enable redis

# Configure nginx
COPY config/nginx.conf /etc/nginx/nginx.conf

# Configure PHP
RUN mv "$PHP_INI_DIR/php.ini-development" "$PHP_INI_DIR/php.ini"
COPY config/php.ini /usr/local/etc/php/conf.d/custom.ini

# Configure supervisord
COPY config/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Setup document root
RUN mkdir -p /var/www/html

# Add application
WORKDIR /var/www/html

# Add a volume so that the external source code can be hooked
VOLUME [ "/var/www/html" ]

# Expose the port nginx is reachable on
EXPOSE 8080

# Let supervisord start nginx & php-fpm
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]

RUN apt-get install -y zip